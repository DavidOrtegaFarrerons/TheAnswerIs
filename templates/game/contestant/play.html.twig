{% extends 'base.html.twig' %}

{% block title %}Contestant - Play{% endblock %}

{% block body %}
    <div class="min-h-screen bg-gradient-to-br from-purple-700 via-indigo-700 to-blue-700 flex items-center justify-center p-4">
        <div class="w-full max-w-3xl rounded-3xl bg-neutral-900/80 backdrop-blur-md shadow-2xl shadow-black/60 p-8 space-y-8">

            <div class="flex justify-center gap-2" id="stepper" data-total="15">
                {% set totalRounds = 15 %}
                {% set currentRoundsPlayed = roundsPlayed|default(0) %}
                {% for i in 1..totalRounds %}
                    {% set isDone = i <= currentRoundsPlayed %}
                    {% set isCurrent = i == currentRoundsPlayed + 1 %}
                    <div id="round-{{ i }}"
                         class="w-7 h-7 rounded-full border-2 text-white text-xs font-bold flex items-center justify-center transition-all duration-150
                            {{ isDone ? 'bg-green-500 border-green-400' : 'bg-neutral-800/80 border-blue-600' }}
                            {{ isCurrent ? 'border-yellow-400 ring-2 ring-yellow-300 scale-110' : '' }}">
                        {{ i }}
                    </div>
                {% endfor %}
            </div>

            <div id="question-text" class="rounded-2xl border-4 border-blue-600 bg-neutral-800/90 text-white text-center text-2xl font-semibold p-8 min-h-[5rem] flex items-center justify-center">
                {{ round.question.title }}
            </div>

            <div id="joker-bar" class="flex justify-center gap-4 my-4">
                <button id="5050"        class="joker-btn hidden text-white">50/50</button>
                <button id="roulette"   class="joker-btn hidden">ðŸŽ¯</button>
                <button id="phone"      class="joker-btn hidden">ðŸ“ž</button>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6" id="answer-container">
                {% for key in ['a', 'b', 'c', 'd'] %}
                    <span
                        data-key="{{ key }}"
                        id="answer-{{ key }}"
                        class="answer-button flex items-center gap-3 rounded-xl border-2 border-blue-600 bg-neutral-800/80 text-left text-white px-6 py-4 transition-all duration-150 ease-out hover:bg-blue-600/80 hover:border-yellow-400 focus:outline-none"
                    >
          <span class="font-bold">{{ key|upper }}.</span>
          <span class="answer-text"></span>
        </span>
                {% endfor %}
            </div>

        </div>
    </div>

    <script>
        function updateStepper(roundsPlayed) {
            const container = document.getElementById('stepper');
            const total = parseInt(container.dataset.total || '15', 10);
            for (let i = 1; i <= total; i++) {
                const el = document.getElementById('round-' + i);
                if (!el) continue;
                el.classList.remove('bg-green-500','border-green-400','bg-neutral-800/80','border-blue-600','border-yellow-400','ring-2','ring-yellow-300','scale-110');
                if (i <= roundsPlayed) {
                    el.classList.add('bg-green-500','border-green-400');
                } else if (i === roundsPlayed + 1 && i <= total) {
                    el.classList.add('bg-neutral-800/80','border-yellow-400','ring-2','ring-yellow-300','scale-110');
                } else {
                    el.classList.add('bg-neutral-800/80','border-blue-600');
                }
            }
        }

        if (typeof window.eventSource !== 'undefined') {
            window.eventSource.close();
        }

        const answers = {
            a: document.getElementById('answer-a'),
            b: document.getElementById('answer-b'),
            c: document.getElementById('answer-c'),
            d: document.getElementById('answer-d'),
        };
        let currentQuestionIndex = 0;

        const allowed = {{ game.contest.allowedJokers|json_encode|raw }};

        document.querySelectorAll('.joker-btn').forEach(btn => {
            if (allowed.includes(btn.id)) btn.classList.remove('hidden');
        });

        function highlightStep(index) {
            for (let i = 1; i <= 15; i++) {
                const step = document.getElementById(`step-${i}`);
                if (!step) continue;

                if (i < index) {
                    step.classList.add('bg-blue-600', 'text-white');
                    step.classList.remove('bg-neutral-800');
                } else if (i === index) {
                    step.classList.add('bg-yellow-400', 'text-black');
                    step.classList.remove('bg-neutral-800', 'text-white');
                } else {
                    step.classList.remove('bg-blue-600', 'bg-yellow-400', 'text-black');
                    step.classList.add('bg-neutral-800', 'text-white');
                }
            }
        }

        window.eventSource = new EventSource('{{ mercure(game_contestant_url(game.id, game.publicToken)) }}');

        window.eventSource.onmessage = (event) => {
            const data = JSON.parse(event.data);

            if (data.type === 'OPTION_REVEALED') {
                const key = data.payload.optionLetter;
                const value = data.payload.optionText;
                const btn = answers[key];
                if (!btn) return;

                btn.querySelector('.answer-text').textContent = value;
            }

            if (data.type === 'JOKER_USED') {
                const jk = data.payload.joker;

                if (jk === '5050' || jk === 'roulette') {
                    data.payload.remove.forEach(key => {
                        const btn = document.getElementById('answer-'+key);
                        if (btn) btn.classList.add('hidden','cursor-not-allowed');
                    });
                }

                if (jk === 'phone') {
                    alert('ðŸ“ž Â¡Ha usado el comodÃ­n de la llamada!');
                }

                document.getElementById(`#${jk}`).classList.add('hidden');
            }

            if (data.type === 'OPTION_SUBMITTED') {
                const option = data.payload.optionLetter;
                const correct = data.payload.isCorrect;

                if (!answers[option]) return;

                if (correct) {
                    answers[option].classList.add('!bg-green-700', '!text-white', '!border-green-900');
                } else {
                    answers[option].classList.add('!bg-red-800', '!text-white', '!border-red-900');
                }
            }

            if (data.type === 'OPTION_SELECTED') {
                document.querySelectorAll('.answer-button').forEach(btn => {
                    btn.classList.remove('ring-4', 'ring-yellow-400', 'scale-105');
                });
                answers[data.payload.optionLetter].classList.add('ring-4', 'ring-yellow-400', 'scale-105');
            }

            if (data.type === 'NEXT_ROUND') {
                revealed = {};
                correctAnswer = null;
                selectedBtn = null;

                Object.entries(answers).forEach(([key, el]) => {
                    const answerPrefix = el.querySelector('span.font-bold');
                    const answerText = el.querySelector('span.answer-text');

                    answerText.classList.remove('hidden');

                    if (answerPrefix) {
                        answerPrefix.textContent = `${key.toUpperCase()}.`;
                    }

                    if (answerText) {
                        answerText.textContent = '';
                    }

                    el.className = 'answer-button flex items-center gap-3 rounded-xl border-2 border-blue-600 bg-neutral-800 text-left text-white px-6 py-4 transition-all duration-150 ease-out hover:bg-blue-600 focus:outline-none';
                });


                if (data.type === 'END_OF_GAME') {
                    document.getElementById('answer-container').innerHTML = '';

                    const congrats = document.createElement('h1');
                    congrats.className = 'text-4xl font-bold text-green-500 text-center mt-10';
                    congrats.textContent = 'ðŸŽ‰ Congratulations! You completed the contest!';
                    document.querySelector('main')?.appendChild(congrats);
                }
            }

            if (data.type === 'NEXT_ROUND') {
                document.getElementById('question-text').textContent = data.payload.questionText;
                updateStepper(data.payload.roundsPlayed);
            }

            if (data.type === 'END_OF_GAME') {
                window.location.href = '/game/contestant/end';
            }
        };

        updateStepper({{ roundsPlayed|default(0) }});
    </script>
{% endblock %}
