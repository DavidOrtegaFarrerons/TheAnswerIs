version: "3.9"

services:
  caddy:
    image: caddy:2-alpine
    depends_on:
      - php
      - mercure
    ports:
      - "80:80"        # dev uses only 80; prod override also maps 443
    volumes:
      - ./Caddyfile.dev:/etc/caddy/Caddyfile:ro   # overridden in prod
      - caddy_data:/data
      - caddy_config:/config
      # overridden in dev to serve local code; in prod we serve from php image path
      - .:/srv/app:ro
    restart: unless-stopped
    networks: [appnet]
    env_file:
      - .env

  php:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_ENV: prod
    environment:
      APP_ENV: prod
      DATABASE_URL: ${DATABASE_URL}
      MERCURE_URL: http://mercure/.well-known/mercure
      MERCURE_PUBLIC_URL: https://${SERVER_NAME:-localhost}/.well-known/mercure
      MERCURE_JWT_SECRET: ${MERCURE_JWT_SECRET}
    working_dir: /var/www/html
    # dev override bind-mounts code; prod uses the built image
    volumes: []
    depends_on:
      - database
    restart: unless-stopped
    networks: [appnet]

  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    restart: unless-stopped
    networks: [appnet]

  mercure:
    image: dunglas/mercure
    restart: unless-stopped
    environment:
      SERVER_NAME: ":80"   # Mercureâ€™s internal Caddy on HTTP; main Caddy will proxy
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_JWT_SECRET}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_JWT_SECRET}
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins https://${SERVER_NAME:-localhost} http://localhost:5173 http://127.0.0.1:5173
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost/healthz"]
      timeout: 5s
      retries: 5
      start_period: 60s
    networks: [appnet]

  # Node is only for building assets (dev or one-off prod builds)
  node:
    image: node:20
    working_dir: /app
    entrypoint: [ "bash", "-lc" ]
    command: "sleep infinity"
    volumes: []   # dev override bind-mounts
    networks: [appnet]

volumes:
  database_data:
  caddy_data:
  caddy_config:
  node_modules:

networks:
  appnet:
    driver: bridge
